{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useQuery } from \"@apollo/client\";\nimport { useCallback, useEffect, useState } from \"react\";\nexport const useSearch = (searchQuery, gqlQuery) => {\n  _s();\n\n  const [state, setState] = useState({\n    characters: [],\n    status: \"IDLE\",\n    error: \"\"\n  });\n  if (searchQuery.length < 2) return; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(gqlQuery, {\n    variables: {\n      name: searchQuery\n    }\n  });\n  useEffect(() => {\n    if (!error) {\n      setState({\n        characters: data.characters.results,\n        status: \"SUCCESS\",\n        error: \"\"\n      });\n    } else {\n      setState({\n        characters: [],\n        status: \"ERROR\",\n        error: error.message\n      });\n    }\n  }, [data]);\n  return state;\n};\n\n_s(useSearch, \"GdDOEf6WT7YwFD9EX6mljQC3Kzk=\", false, function () {\n  return [useQuery];\n});\n\nexport const useDebounce = (value, delay = 300) => {\n  _s2();\n\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n};\n\n_s2(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");\n\nexport const useSearchForm = () => {\n  _s3();\n\n  const [searchValue, setSearchValue] = useState(\"\");\n  const onSearchChange = useCallback(e => setSearchValue(e.target.value), []);\n  return {\n    searchValue,\n    onSearchChange\n  };\n};\n\n_s3(useSearchForm, \"tEvECnL31J/gpOFOQspFwPMDND0=\");","map":{"version":3,"sources":["/home/czernous/development/personal/study_projects/rick-and-morty-party/src/hooks.tsx"],"names":["useQuery","useCallback","useEffect","useState","useSearch","searchQuery","gqlQuery","state","setState","characters","status","error","length","data","loading","variables","name","results","message","useDebounce","value","delay","debouncedValue","setDebouncedValue","timer","setTimeout","clearTimeout","useSearchForm","searchValue","setSearchValue","onSearchChange","e","target"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,WAAD,EAAmBC,QAAnB,KAAqC;AAAA;;AAC5D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;AACjCM,IAAAA,UAAU,EAAE,EADqB;AAEjCC,IAAAA,MAAM,EAAE,MAFyB;AAGjCC,IAAAA,KAAK,EAAE;AAH0B,GAAD,CAAlC;AAMA,MAAIN,WAAW,CAACO,MAAZ,GAAqB,CAAzB,EAA4B,OAPgC,CAS5D;;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBH,IAAAA;AAAjB,MAA2BX,QAAQ,CAACM,QAAD,EAAW;AAClDS,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAEX;AAAR;AADuC,GAAX,CAAzC;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,KAAL,EAAY;AACVH,MAAAA,QAAQ,CAAC;AACPC,QAAAA,UAAU,EAAEI,IAAI,CAACJ,UAAL,CAAgBQ,OADrB;AAEPP,QAAAA,MAAM,EAAE,SAFD;AAGPC,QAAAA,KAAK,EAAE;AAHA,OAAD,CAAR;AAKD,KAND,MAMO;AACLH,MAAAA,QAAQ,CAAC;AACPC,QAAAA,UAAU,EAAE,EADL;AAEPC,QAAAA,MAAM,EAAE,OAFD;AAGPC,QAAAA,KAAK,EAAEA,KAAK,CAACO;AAHN,OAAD,CAAR;AAKD;AACF,GAdQ,EAcN,CAACL,IAAD,CAdM,CAAT;AAgBA,SAAON,KAAP;AACD,CA/BM;;GAAMH,S;UAUsBJ,Q;;;AAuBnC,OAAO,MAAMmB,WAAW,GAAG,CAACC,KAAD,EAA4BC,KAAa,GAAG,GAA5C,KAAoD;AAAA;;AAC7E,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAACiB,KAAD,CAApD;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFuB,EAErBC,KAFqB,CAAxB;AAGA,WAAO,MAAM;AACXK,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACD,KAFD;AAGD,GAPQ,EAON,CAACJ,KAAD,EAAQC,KAAR,CAPM,CAAT;AASA,SAAOC,cAAP;AACD,CAbM;;IAAMH,W;;AAeb,OAAO,MAAMQ,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC1B,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM2B,cAAc,GAAG7B,WAAW,CAAE8B,CAAD,IAAOF,cAAc,CAACE,CAAC,CAACC,MAAF,CAASZ,KAAV,CAAtB,EAAwC,EAAxC,CAAlC;AAEA,SAAO;AACLQ,IAAAA,WADK;AAELE,IAAAA;AAFK,GAAP;AAID,CATM;;IAAMH,a","sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nexport const useSearch = (searchQuery: any, gqlQuery: any) => {\n  const [state, setState] = useState({\n    characters: [],\n    status: \"IDLE\",\n    error: \"\",\n  });\n\n  if (searchQuery.length < 2) return;\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const { data, loading, error } = useQuery(gqlQuery, {\n    variables: { name: searchQuery },\n  });\n\n  useEffect(() => {\n    if (!error) {\n      setState({\n        characters: data.characters.results,\n        status: \"SUCCESS\",\n        error: \"\",\n      });\n    } else {\n      setState({\n        characters: [],\n        status: \"ERROR\",\n        error: error.message,\n      });\n    }\n  }, [data]);\n\n  return state;\n};\n\nexport const useDebounce = (value: string | undefined, delay: number = 300) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport const useSearchForm = () => {\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const onSearchChange = useCallback((e) => setSearchValue(e.target.value), []);\n\n  return {\n    searchValue,\n    onSearchChange,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
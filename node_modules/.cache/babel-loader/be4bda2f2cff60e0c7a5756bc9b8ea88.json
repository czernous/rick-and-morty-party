{"ast":null,"code":"var _jsxFileName = \"/home/czernous/development/personal/study_projects/rick-and-morty-party/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { useDebounce, useSearchForm } from \"./hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RM_CHARACTERS = gql`\n  query getRMcharacters($name: String!) {\n    characters(filter: { name: $name }) {\n      info {\n        count\n      }\n      results {\n        id\n        name\n        image\n      }\n    }\n  }\n`;\n\nfunction App() {\n  _s();\n\n  const {\n    searchValue,\n    onSearchChange\n  } = useSearchForm();\n\n  const getQuery = searchQuery => {\n    if (searchQuery.length < 2) return;\n    return searchQuery;\n  };\n\n  const query = useDebounce(getQuery(searchValue)); // const { data, loading, error } = useQuery(RM_CHARACTERS, {\n  //   variables: { name: query },\n  // });\n\n  const [getCharacters, {\n    loading,\n    data\n  }] = useLazyQuery(RM_CHARACTERS);\n  console.log(data, query);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Enter a character name\",\n      onChange: onSearchChange,\n      onKeyUp: () => getCharacters({\n        variables: {\n          name: query\n        }\n      }),\n      value: searchValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WOTZqN3DFDGc4xrZo9Hri699JnM=\", false, function () {\n  return [useSearchForm, useDebounce, useLazyQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/czernous/development/personal/study_projects/rick-and-morty-party/src/App.tsx"],"names":["gql","useLazyQuery","React","useDebounce","useSearchForm","RM_CHARACTERS","App","searchValue","onSearchChange","getQuery","searchQuery","length","query","getCharacters","loading","data","console","log","variables","name"],"mappings":";;;AAAA,SAASA,GAAT,EAAwBC,YAAxB,QAA4C,gBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,SAA3C;;AAEA,MAAMC,aAAa,GAAGL,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeA,SAASM,GAAT,GAAe;AAAA;;AACb,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCJ,aAAa,EAArD;;AACA,QAAMK,QAAQ,GAAIC,WAAD,IAAyB;AACxC,QAAIA,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC5B,WAAOD,WAAP;AACD,GAHD;;AAIA,QAAME,KAAK,GAAGT,WAAW,CAACM,QAAQ,CAACF,WAAD,CAAT,CAAzB,CANa,CAQb;AACA;AACA;;AAEA,QAAM,CAACM,aAAD,EAAgB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAhB,IAAqCd,YAAY,CAACI,aAAD,CAAvD;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAkBH,KAAlB;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AACE,MAAA,WAAW,EAAC,wBADd;AAEE,MAAA,QAAQ,EAAEJ,cAFZ;AAGE,MAAA,OAAO,EAAE,MAAMK,aAAa,CAAC;AAAEK,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAEP;AAAR;AAAb,OAAD,CAH9B;AAIE,MAAA,KAAK,EAAEL;AAJT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAxBQD,G;UACiCF,a,EAK1BD,W,EAM6BF,Y;;;KAZpCK,G;AA0BT,eAAeA,GAAf","sourcesContent":["import { gql, useQuery, useLazyQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { useDebounce, useSearchForm } from \"./hooks\";\n\nconst RM_CHARACTERS = gql`\n  query getRMcharacters($name: String!) {\n    characters(filter: { name: $name }) {\n      info {\n        count\n      }\n      results {\n        id\n        name\n        image\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const { searchValue, onSearchChange } = useSearchForm();\n  const getQuery = (searchQuery: string) => {\n    if (searchQuery.length < 2) return;\n    return searchQuery;\n  };\n  const query = useDebounce(getQuery(searchValue));\n\n  // const { data, loading, error } = useQuery(RM_CHARACTERS, {\n  //   variables: { name: query },\n  // });\n\n  const [getCharacters, { loading, data }] = useLazyQuery(RM_CHARACTERS);\n  console.log(data, query);\n  return (\n    <div className=\"App\">\n      <input\n        placeholder=\"Enter a character name\"\n        onChange={onSearchChange}\n        onKeyUp={() => getCharacters({ variables: { name: query } })}\n        value={searchValue}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
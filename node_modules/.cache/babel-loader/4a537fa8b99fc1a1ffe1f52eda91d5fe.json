{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nexport const useSearch = searchQuery => {\n  _s();\n\n  const [state, setState] = useState({\n    characters: [],\n    status: \"IDLE\",\n    error: \"\"\n  });\n  const RM_CHARACTERS = gql`\n    query getRMcharacters($name: String = ${searchQuery}){\n        characters(filter: { name: $name }) {\n          info {\n            count,\n          }\n          results {\n            id,\n            name,\n            image\n          }\n        }\n      }\n    `;\n  const {\n    error,\n    data\n  } = useQuery(RM_CHARACTERS);\n  useEffect(() => {\n    if (searchQuery.length < 2) return;\n\n    if (!error) {\n      setState({\n        characters: data,\n        status: \"SUCCESS\",\n        error: \"\"\n      });\n    } else {\n      setState({\n        characters: [],\n        status: \"ERROR\",\n        error: error.message\n      });\n    }\n\n    return state;\n  }, [searchQuery, error, data]);\n};\n\n_s(useSearch, \"XqyTO/WRKMslcmxD9fBCTNHjPmE=\", false, function () {\n  return [useQuery];\n});\n\nexport const useDebounce = (value, delay = 300) => {\n  _s2();\n\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n};\n\n_s2(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");\n\nexport const useSearchForm = () => {\n  _s3();\n\n  const [searchValue, setSearchValue] = useState(\"\");\n  const onSearchChange = useCallback(e => setSearchValue(e.target.value), []);\n  return {\n    searchValue,\n    onSearchChange\n  };\n};\n\n_s3(useSearchForm, \"tEvECnL31J/gpOFOQspFwPMDND0=\");","map":{"version":3,"sources":["/home/czernous/development/personal/study_projects/rick-and-morty-party/src/hooks.tsx"],"names":["useCallback","useEffect","useState","useQuery","gql","useSearch","searchQuery","state","setState","characters","status","error","RM_CHARACTERS","data","length","message","useDebounce","value","delay","debouncedValue","setDebouncedValue","timer","setTimeout","clearTimeout","useSearchForm","searchValue","setSearchValue","onSearchChange","e","target"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,OAAO,MAAMC,SAAc,GAAIC,WAAD,IAAyB;AAAA;;AACrD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AACjCO,IAAAA,UAAU,EAAE,EADqB;AAEjCC,IAAAA,MAAM,EAAE,MAFyB;AAGjCC,IAAAA,KAAK,EAAE;AAH0B,GAAD,CAAlC;AAMA,QAAMC,aAAa,GAAGR,GAAI;AAC5B,4CAA4CE,WAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbE;AAcA,QAAM;AAAEK,IAAAA,KAAF;AAASE,IAAAA;AAAT,MAAkBV,QAAQ,CAACS,aAAD,CAAhC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,WAAW,CAACQ,MAAZ,GAAqB,CAAzB,EAA4B;;AAC5B,QAAI,CAACH,KAAL,EAAY;AACVH,MAAAA,QAAQ,CAAC;AACPC,QAAAA,UAAU,EAAEI,IADL;AAEPH,QAAAA,MAAM,EAAE,SAFD;AAGPC,QAAAA,KAAK,EAAE;AAHA,OAAD,CAAR;AAKD,KAND,MAMO;AACLH,MAAAA,QAAQ,CAAC;AACPC,QAAAA,UAAU,EAAE,EADL;AAEPC,QAAAA,MAAM,EAAE,OAFD;AAGPC,QAAAA,KAAK,EAAEA,KAAK,CAACI;AAHN,OAAD,CAAR;AAKD;;AACD,WAAOR,KAAP;AACD,GAhBQ,EAgBN,CAACD,WAAD,EAAcK,KAAd,EAAqBE,IAArB,CAhBM,CAAT;AAiBD,CAxCM;;GAAMR,S;UAqBaF,Q;;;AAqB1B,OAAO,MAAMa,WAAW,GAAG,CAACC,KAAD,EAAgBC,KAAa,GAAG,GAAhC,KAAwC;AAAA;;AACjE,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAACe,KAAD,CAApD;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFuB,EAErBC,KAFqB,CAAxB;AAGA,WAAO,MAAM;AACXK,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACD,KAFD;AAGD,GAPQ,EAON,CAACJ,KAAD,EAAQC,KAAR,CAPM,CAAT;AASA,SAAOC,cAAP;AACD,CAbM;;IAAMH,W;;AAeb,OAAO,MAAMQ,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCxB,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAMyB,cAAc,GAAG3B,WAAW,CAAE4B,CAAD,IAAOF,cAAc,CAACE,CAAC,CAACC,MAAF,CAASZ,KAAV,CAAtB,EAAwC,EAAxC,CAAlC;AAEA,SAAO;AACLQ,IAAAA,WADK;AAELE,IAAAA;AAFK,GAAP;AAID,CATM;;IAAMH,a","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\n\nexport const useSearch: any = (searchQuery: string) => {\n  const [state, setState] = useState({\n    characters: [],\n    status: \"IDLE\",\n    error: \"\",\n  });\n\n  const RM_CHARACTERS = gql`\n    query getRMcharacters($name: String = ${searchQuery}){\n        characters(filter: { name: $name }) {\n          info {\n            count,\n          }\n          results {\n            id,\n            name,\n            image\n          }\n        }\n      }\n    `;\n  const { error, data } = useQuery(RM_CHARACTERS);\n\n  useEffect(() => {\n    if (searchQuery.length < 2) return;\n    if (!error) {\n      setState({\n        characters: data,\n        status: \"SUCCESS\",\n        error: \"\",\n      });\n    } else {\n      setState({\n        characters: [],\n        status: \"ERROR\",\n        error: error.message,\n      });\n    }\n    return state;\n  }, [searchQuery, error, data]);\n};\n\nexport const useDebounce = (value: string, delay: number = 300) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport const useSearchForm = () => {\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const onSearchChange = useCallback((e) => setSearchValue(e.target.value), []);\n\n  return {\n    searchValue,\n    onSearchChange,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from \"@apollo/client\";\nimport { GET_RM_CHARACTERS } from \"../../queries/GetRmCharacters\";\nimport { useDebounce, useSearchForm, useSkip, useChartacters, useChartactersFilter } from \"../../hooks\";\nimport { useContext } from \"react\";\nimport { Context } from \"../../store/Store\";\n\nconst Container = ({\n  children\n}) => {\n  _s();\n\n  const {\n    searchValue,\n    onSearchChange\n  } = useSearchForm();\n  const query = useDebounce(searchValue);\n  const skip = useSkip(query);\n  const {\n    data,\n    error\n  } = useQuery(GET_RM_CHARACTERS, {\n    variables: {\n      name: query\n    },\n    skip\n  });\n  const {\n    characters,\n    queryError,\n    status\n  } = useChartacters(data, error);\n  const {\n    onDelete,\n    onSelect,\n    partyMorty,\n    partyRick,\n    excludedIds\n  } = useChartactersFilter(characters);\n  const [dispatch] = useContext(Context);\n  useEffect(() => {\n    dispatch({\n      type: \"SET_EXCLUDEDIDS\",\n      payload: []\n    });\n  });\n  return children({\n    characters,\n    onSearchChange,\n    queryError,\n    status,\n    onDelete,\n    onSelect,\n    partyMorty,\n    partyRick\n  });\n};\n\n_s(Container, \"Xu+FhLYjSrn3h07Fh43OPga3uK4=\", false, function () {\n  return [useSearchForm, useDebounce, useSkip, useQuery, useChartacters, useChartactersFilter];\n});\n\n_c = Container;\nexport default Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/home/czernous/development/personal/study_projects/rick-and-morty-party/src/components/Container/index.tsx"],"names":["useQuery","GET_RM_CHARACTERS","useDebounce","useSearchForm","useSkip","useChartacters","useChartactersFilter","useContext","Context","Container","children","searchValue","onSearchChange","query","skip","data","error","variables","name","characters","queryError","status","onDelete","onSelect","partyMorty","partyRick","excludedIds","dispatch","useEffect","type","payload"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAIEC,cAJF,EAKEC,oBALF,QAMO,aANP;AAOA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,QAAwB,mBAAxB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAAA;;AACvC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCT,aAAa,EAArD;AAEA,QAAMU,KAAK,GAAGX,WAAW,CAACS,WAAD,CAAzB;AACA,QAAMG,IAAI,GAAGV,OAAO,CAACS,KAAD,CAApB;AAEA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBhB,QAAQ,CAACC,iBAAD,EAAoB;AAClDgB,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAEL;AAAR,KADuC;AAElDC,IAAAA;AAFkD,GAApB,CAAhC;AAKA,QAAM;AAAEK,IAAAA,UAAF;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA;AAA1B,MAAqChB,cAAc,CAACU,IAAD,EAAOC,KAAP,CAAzD;AAEA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,UAAtB;AAAkCC,IAAAA,SAAlC;AAA6CC,IAAAA;AAA7C,MACJpB,oBAAoB,CAACa,UAAD,CADtB;AAEA,QAAM,CAACQ,QAAD,IAAapB,UAAU,CAACC,OAAD,CAA7B;AACAoB,EAAAA,SAAS,CAAC,MAAM;AACdD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,OAAO,EAAE;AAApC,KAAD,CAAR;AACD,GAFQ,CAAT;AAIA,SAAOpB,QAAQ,CAAC;AACdS,IAAAA,UADc;AAEdP,IAAAA,cAFc;AAGdQ,IAAAA,UAHc;AAIdC,IAAAA,MAJc;AAKdC,IAAAA,QALc;AAMdC,IAAAA,QANc;AAOdC,IAAAA,UAPc;AAQdC,IAAAA;AARc,GAAD,CAAf;AAUD,CA9BD;;GAAMhB,S;UACoCN,a,EAE1BD,W,EACDE,O,EAEWJ,Q,EAKmBK,c,EAGzCC,oB;;;KAdEG,S;AAgCN,eAAeA,SAAf","sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport { GET_RM_CHARACTERS } from \"../../queries/GetRmCharacters\";\nimport {\n  useDebounce,\n  useSearchForm,\n  useSkip,\n  useChartacters,\n  useChartactersFilter,\n} from \"../../hooks\";\nimport { useContext } from \"react\";\nimport { Context } from \"../../store/Store\";\n\nconst Container = ({ children }: any) => {\n  const { searchValue, onSearchChange } = useSearchForm();\n\n  const query = useDebounce(searchValue);\n  const skip = useSkip(query);\n\n  const { data, error } = useQuery(GET_RM_CHARACTERS, {\n    variables: { name: query },\n    skip,\n  });\n\n  const { characters, queryError, status } = useChartacters(data, error);\n\n  const { onDelete, onSelect, partyMorty, partyRick, excludedIds } =\n    useChartactersFilter(characters);\n  const [dispatch] = useContext(Context);\n  useEffect(() => {\n    dispatch({ type: \"SET_EXCLUDEDIDS\", payload: [] });\n  });\n\n  return children({\n    characters,\n    onSearchChange,\n    queryError,\n    status,\n    onDelete,\n    onSelect,\n    partyMorty,\n    partyRick,\n  });\n};\n\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}